10分钟前的新鲜面经， 一个湾湾小哥面的，在doordash待了三年半了已经。

题目比较有意思，感觉是小哥自己出的题， 有点类似简易版的word ladder II

题目大概就是说， doordash 送餐有几条路线， 让你求出从a 到b的最短路径

给你一个list of tuples
Road from/to/weight
1 (1, 2, 1)
2 (2, 3, 1)
3 (3, 4, 1)
4 (4, 5, 1)
5 (5, 1, 3)
6 (1, 3, 2)
7 (5, 3, 1)

第一行 `1 (1, 2, 1)` 表示 road 1 这条路上 连通了city 1 和 city 2, 需要的weight是1.
那么 从 City 1 到City 5 的 shortest path collections: 1 → 5, 1 → 2 → 3 → 5, and 1 → 3 → 5.
要求输出: ['YES', 'YES', 'NO', 'NO', 'YES', 'YES', 'YES']， 表示road 1，2，5，6，7 在shorted path上

题目本身不难，但是实在hackerrank上写，要自己import library 和写test case。 尽量多和面试官沟通 把test case过一遍就没问题。

顺便再po一下我的代码哈

import java.util.*;
  
 class Solution {
      
     public static void main(String[] args) {
         Solution shortestPath = new Solution();
         Map<Integer, List<Integer>> map = new HashMap<>();
         map.put(0, Arrays.asList(1, 2, 1));
         map.put(1, Arrays.asList(2, 3, 1));
         map.put(2, Arrays.asList(3, 4, 1));
         map.put(3, Arrays.asList(4, 5, 1));
         map.put(4, Arrays.asList(5, 1, 3));
         map.put(5, Arrays.asList(1, 3, 2));
         map.put(6, Arrays.asList(5, 3, 1));
          
         List<Integer> cities = Arrays.asList(1, 2, 3, 4, 5);
          
         boolean[] res = shortestPath.shortestPath(map, cities);
          
         for (boolean used : res) {
            System.out.println(used + ", ");
         }
     }
      
    // given a map of bidrectional routes
    // find a shortest path
    public boolean[] shortestPath(Map<Integer, List<Integer>> map, List<Integer> cities) {
        // 1 (1, 2, 1)
        // 1 -> [2, 1, 1]
        Map<Integer, List<int[]>> graph = new HashMap<>();
         
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            int road = entry.getKey();
            List<Integer> value = entry.getValue();
            int from = value.get(0);
            int to = value.get(1);
            int weight = value.get(2);
             
            graph.computeIfAbsent(from, k -> new ArrayList<>()).add(new int[]{to, weight, road});
            graph.computeIfAbsent(to, k -> new ArrayList<>()).add(new int[]{from, weight, road});
        }
         
        // [city_id, sumOfWeight]
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        Set<Integer> visited = new HashSet<>();
        pq.offer(new int[]{cities.get(0), 0});
        int targetCity = cities.get(cities.size() - 1);
        int lowestWeight = 0;
         
        while (!pq.isEmpty()) {
            int[] entry = pq.poll();
             
            if (entry[0] == targetCity) {
                lowestWeight = entry[1];
                break;
            }
             
            visited.add(entry[0]);
             
            for (int[] neis : graph.get(entry[0])) {
                if (!visited.contains(neis[0])) {
                    pq.offer(new int[]{neis[0], entry[1] + neis[1]});
                }
            }
        }
         
        boolean[] res = new boolean[map.size()];
         
        dfs(cities.get(0), targetCity, graph, lowestWeight, res, new HashSet<>());
        return res;
    }
     
    private void dfs(int from, int target, Map<Intege‍‍‍‍‍‍‍‍‌‍‌‌‍‌‌‌‌‌r, List<int[]>> graph, int weight, boolean[] res, Set<Integer> roads) {
        if (weight < 0) {
            return;      
        }
         
        if (from == target) {
            for (int road : roads) {
                res[road] = true;
            }
        }
         
        for (int[] neis : graph.get(from)) {
            // add the road
            if (!roads.contains(neis[2])) {
                roads.add(neis[2]);
                dfs(neis[0], target, graph, weight - neis[1], res, roads);
                roads.remove(neis[2]);
            }
        }
    }
 }


==============================================

贡献一个doordash没见过的题
/*
A dasher sometimes travels between cities. To avoid delays, the dasher first checks for the shortest routes. Given a map of the cities and their bidirectional roads represented by a graph of nodes and edges, determine which given roads are along any shortest path.
// Return an array of strings, one for each road in order, where the value is YES if the road is along a shortest path or NO if it is not.The roads or edges are named using their 1-based index within the input arrays.

// Example
// given a map of g_nodes = 5 nodes, the starting nodes, ending nodes and road lengths are:

// Road    from/to/weight
//     1    (1, 2, 1)
//     2    (2, 3, 1)
//     3    (3, 4, 1)
//     4    (4, 5, 1)
//     5    (5, 1, 3)
//     6    (1, 3, 2)
//     7    (5, 3, 1)
// The traveller must travel from city 1 to city g_nodes, so from node 1 to node 5 in this case.
// The shortest path is 3 units long and there are three paths of that length: 1 → 5, 1 → 2 → 3 → 5, and 1 → 3 ‍‍‍‍‍‍‍‍‌‍‌‌‍‌‌‌‌‌→ 5.
// Return an array of strings, one for each road in order, where the value is YES if a road is along a shortest path or NO if it is not. In this case, the resulting array is ['YES', 'YES', 'NO', 'NO', 'YES', 'YES', 'YES']. The third and fourth roads connect nodes (3, 4) and (4, 5) respectively. They are not on a shortest path, i.e. one with a length of 3 in this case.

*/

https://leetcode.com/discuss/interview-question/299983/Check-Your-Route/281201



（3） https://www.1point3acres.com/bbs/thread-771662-1-1.html  same question
